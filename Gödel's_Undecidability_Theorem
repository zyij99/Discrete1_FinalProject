import java.util.*;

public class GödelUndecidabilityTheorem{
    public static void main(String[] args){
        //Goldbach Conjecture
        Scanner console = new Scanner(System.in);
        System.out.println("Enter a even integer greater than 2:");
        int integerInput = console.nextInt();
        
        while(integerInput <= 2 || integerInput % 2 != 0) {
            System.out.println("Please enter a even number greater than 2");
            integerInput = console.nextInt();
        }
    	System.out.println(sumOfPrimes(integerInput));

        //Exercise2
		System.out.println("When n is 22, i is: " + whatIsI(22));
		System.out.println("When n is 23, i is: " + whatIsI(23));

        //Prime to Symbols
        int[] A = {1,3,5,7,9,11,13,15,17,19};
		System.out.println("Symbols According to Godel's Statement: " + listOfInt(A));

    }
    //Goldbach Conjecture
    public static boolean isPrime(int numInput) {
    	for(int i = 0; i < numInput; i++) {
    		for(int j = 0; j < numInput; j++) {
    			if((i*j) == numInput && i != 1 && j != 1) {
    				return false;
    			}
    		}
    	}
    	return true;
    }
    
    public static String sumOfPrimes(int numInput) {
    	String sumPrimeNums = ""; 
    	for(int i = 0; i < numInput; i++) {
    		for(int j = 0; j <numInput; j++) {
    			if((isPrime(i) && isPrime(j)) && (i!= 1 && j!= 1) && ((i+j) == numInput)) {
    				sumPrimeNums = i + " + " + j + " = " + numInput;
    			}
    		}
    	}
    	return sumPrimeNums;
    }

    //Exercise2
    public static boolean isEven(int n) {
		if(n % 2 == 0) {
			return true;
		}
		return false;
	}
	
	public static int whatIsI(int n) { //count is i
		int count = 0;
		while(n!=1) {
			count ++;
			if(isEven(n)) {
				n/=2;
			}else {
				n = (3*n) +1;
			}
		}
		return count;
	}

    //List of Primes to Symbols
    public static String listOfInt(int listOfPrimes[]) {
		String symbolsOfPrimes = "";	
		for(int i = 0; i < listOfPrimes.length; i++) {
			if(boolGodelNumbering(listOfPrimes[i])) {
				symbolsOfPrimes += godelNumbering(listOfPrimes[i]);
			}
			else {
				return "Unacceptable List of Primes";
			}
		}
		return symbolsOfPrimes;
	}
	
	public static boolean boolGodelNumbering(int i) {
		if(i <= 19) {
			if(i%2 != 0) {
				return true;
			}
		}
		return false;
	}
	
	public static String godelNumbering(int i) {
		if(i == 1) {
			return "0";
		}
		else if(i == 3) {
			return "f";
		}
		else if(i == 5) {
			return "¬";
		}
		else if(i == 7) {
			return "∨";
		}
		else if(i == 9) {
			return "∀";
		}
		else if(i == 11) {
			return "(";
		}
		else if(i == 13) {
			return ")";
		}
		else if(i == 15) {
			return "∧";
		}
		else if(i == 17) {
			return "∃";
		}
		else if(i == 19) {
			return "=";
		}
		return null;
	}

}
